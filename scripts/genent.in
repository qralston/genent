#! /usr/bin/python3

from ldif import LDIFParser
import argparse
import base64
import logging
import grp
import sys

# Global variables.
DEBUG = False
PROG = 'genent'
QUIET = False
VERBOSE = False
VERSION = '@PACKAGE_VERSION@'

# This is a global dictionary to which MyLDIF adds the objects it parses from
# the LDIF files it reads.
objects = {}

# This is a global dictionary that MyLDIF uses to avoid adding two objects with
# the same sAMAccountName.
seen_sam_account_names = {}

class objectSID:
    'Operate on a binary-encoded Windows SID object'

    def __init__(self, remainder):
        if len(remainder) < 8:
            raise TypeError("objectSid %s is too short to be valid" % sid)
        self.__revision = int(remainder[0])
        count = int(remainder[1])
        self.__authority = (int(remainder[2])<<40) + (int(remainder[3])<<32) + (int(remainder[4])<<24) + (int(remainder[5])<<16) + (int(remainder[6])<<8) + (int(remainder[7]))
        remainder = remainder[8:]
        if self.__revision != 1:
            raise TypeError("objectSid %s revision is not 1" % base64_sid)
        if count * 4 != len(remainder):
            raise TypeError("length %u of objectSid does not agree with actual length" % count)
        if count < 2:
            raise TypeError("sorry; I don't know how to deal with objectSid %s of length %u" % (base64_sid, count))
        self.__issuer = []
        while count > 1:
            self.__issuer.append(int(remainder[0]) + (int(remainder[1])<<8) + (int(remainder[2])<<16) + (int(remainder[3])<<24))
            count -= 1
            remainder = remainder[4:]
        self.__rid = int(remainder[0]) + (int(remainder[1])<<8) + (int(remainder[2])<<16) + (int(remainder[3])<<24)

    @property
    def revision(self):
        return self.__revision

    @property
    def authority(self):
        return self.__authority

    @property
    def issuer(self):
        return '-'.join(map(str,self.__issuer))

    @property
    def rid(self):
        return self.__rid

    @property
    def to_string(self):
        return "S-%u-%u-%s-%u" % (self.__revision, self.__authority, '-'.join(map(str,self.__issuer)), self.__rid)

class MyLDIF(LDIFParser):

    class MyLDIF(LDIFParser):
        def __init__(
                self,
                input_file,
                ignored_attr_types=None,
                max_entries=0,
                process_url_schemes=None,
                line_sep='\n'
        ):
            LDIFParser.__init__(self,input)

    # The parse() method calls the handle() method once for each LDIF object it
    # processes, so this is where we do all of our work.

    def handle(self, dn, entry):

        object_sid = ''
        cn = ''

        is_user = False
        is_computer = False
        is_dc = False
        is_group = False

        required_attributes = ['objectClass', 'cn', 'sAMAccountName', 'objectSid']

        log.debug('handling dn=%s', dn)

        # We need to perform numerous sanity-checks on the LDIF entry.  The
        # first test is whether the entry has all of the attributes we need it
        # to have.

        for attribute in required_attributes:
            if not attribute in entry:
                log.warning('entry with dn=%s is missing require %s attribute; skipping', dn, attribute)
                return 1

        # The next test is whether the entry is for a user or group.

        if b'user' in entry['objectClass']:
            is_user = True

        if b'group' in entry['objectClass']:
            is_group = True

        if is_user and is_group:
            log.warning('entry dn=%s is both a user and group; skipping', dn)
            return 1

        if not (is_user or is_group):
            log.warning('entry dn=%s is neither a user nor group; skipping', dn)
            return 1

        # If we are asked to synthesize passwd(5) entries, the pw_gid we output
        # will vary depending on whether this object is a regular user, a
        # computer, or a domain controller.  So we need to gather that
        # information.

        if is_user:

            if b'computer' in entry['objectClass']:
                is_computer = True

            if 'OU=Domain Controllers' in dn.split(','):
                is_dc = True

        # A group must have the groupType attribute.

        if is_group:

            if not 'groupType' in entry:
                log.warning('entry with dn=%s is a group but lacks groupType attribute; skipping', dn)
                return 1
            else:
                grouptype = int(entry['groupType'][0].decode())
                log.debug('entry with dn=%s is a group with groupType %d', dn, grouptype)

        # The sAMAccountName attribute must be a list, must have only one
        # element in it, and that element must not contain a colon.

        if not isinstance(entry['sAMAccountName'], list):
            log.warning('entry dn=%s sAMAccountName attribute is not a list; skipping', dn)
            return 1

        if len(entry['sAMAccountName']) != 1:
            log.warning('entry dn=%s has multiple sAMAccountName attributes; skipping', dn)
            return 1

        sam_account_name = entry['sAMAccountName'][0].decode()
        sam_account_name_lc = sam_account_name.lower()

        if ':' in sam_account_name:
            log.warning('entry dn=%s sAMAccountName attribute %s contains ":"; skipping', dn, entry['sAMAccountName'][0].decode())
            return 1
        else:
            log.debug('entry dn=%s: sAMAccountName=%s', dn, sam_account_name)

        # We must not have already seen the sAMAccountName this object has on
        # some other object.
        #
        # Note that we perform this comparison against the lowercased
        # sAMAccountName value, as Active Directory is case-aware but not
        # case-sensitive.

        if sam_account_name_lc in seen_sam_account_names:
            log.warning('entry dn=%s sAMAccountName attribute duplicates sAMAccountName for dn=%s', dn, seen_sam_account_names[sam_account_name_lc])
            return 1
        else:
            seen_sam_account_names[sam_account_name_lc] = 1

        # The objectSid attribute must be a list, and must have only one
        # element in it.

        if not isinstance(entry['objectSid'], list):
            log.warning('entry dn=%s objectSid attribute is not a list; skipping', dn)
            return 1
        elif len(entry['objectSid']) != 1:
            log.warning('entry dn=%s has multiple objectSid attributes; skipping', dn)
            return 1
        else:
            object_sid = entry['objectSid'][0]
            log.debug('entry dn=%s: objectSid=%s', dn, (base64.b64encode(object_sid)).decode())

        # The cn attribute must exist, it must be a list, it must have only one
        # element in it, and that element must not contain a colon.

        if not 'cn' in entry:
            log.warning('entry dn=%s lacks cn attribute; skipping', dn)
            return 1
        elif not isinstance(entry['cn'], list):
            log.warning('entry dn=%s cn attribute is not a list; skipping', dn)
            return 1
        elif len(entry['cn']) != 1:
            log.warning('entry dn=%s has multiple cn attributes; skipping', dn)
            return 1
        else:
            cn = entry['cn'][0].decode()
            if ':' in cn:
                log.warning('entry dn=%s cn attribute %s contains ":"; skipping', dn, cn)
                return 1
            else:
                log.debug('entry dn=%s: cn=%s', dn, cn)

        # If we have already seen an object that has the same dn as this
        # object, skip this one.

        if dn in objects:
            log.warning('already encountered object with dn=%s; skipping dn=%s', objects[dn], dn)
            return 1

        # If we made it to here, all sanity checks passed, so add this entry.

        objects[dn] = {
            'objectSid': object_sid,
            'sAMAccountName': sam_account_name,
            'cn': cn,
            'is_user': is_user,
            'is_group': is_group,
            'is_computer': is_computer,
            'is_dc': is_dc,
        }

        # If this object is a group, add some additional attributes.

        if is_group:

            # Add the groupType.

            objects[dn]['groupType'] = grouptype

            # Add any member attributes.

            if 'member' in entry:
                objects[dn]['member'] = []
                for member in entry['member']:
                    objects[dn]['member'].append(member.decode())

def expand_members(sam_account_names, group_to_expand, objects, dn_list, seen_dns):

    # Active Directory permits groups to contain other groups.  When sssd
    # synthesizes the gr_mem list for a group, it recursively expands any
    # groups it finds.  We will do the same.
    #
    # I am not convinced that Active Directory doesn't permit include loops
    # (e.g., group A include group B, group B includes group C, group C
    # includes group A), so we will guard against infinite loops in recursive
    # group expansion by noting which dns we've already seen.

    for dn in dn_list:
        if dn in seen_dns:
            log.debug('dn=%s already seen when expanding group %s membership', dn, group_to_expand)
        else:
            log.debug('dn=%s not already seen when expanding group %s membership', dn, group_to_expand)
            seen_dns[dn] = 1
            if dn in objects:
                object = objects[dn]
                if object['is_user']:
                    log.debug('expanded user dn=%s as member of group %s', object['sAMAccountName'], group_to_expand)
                    sam_account_names[object['sAMAccountName']] = 1
                else:
                    if 'member' in objects[dn]:
                        log.debug('group dn=%s in group %s has members; expanding recursively', dn, group_to_expand)
                        expand_members(sam_account_names, group_to_expand, objects, object['member'], seen_dns)
            else:
                # This is a a tricky case.  This can happen normally for (e.g.)
                # Exchange public folders that are members of a mail-enabled
                # security group, because we only process user and group
                # objects when reading LDIF data, and Exchange public folders
                # are neither.  But this might also mean that there were
                # regular user/group objects missing in the dump.  Really, the
                # only way to rule out the latter case is to process *all*
                # objects in the LDIF dump (not just users/groups).  FIXME?
                log.debug('unknown dn=%s encountered when expanding group %s', dn, group_to_expand)

# Initialize a new ArgumentParser.

p = argparse.ArgumentParser(description="Synthesize passwd/group entries from LDIF data.",
                            prog=PROG,
                            usage='%(prog)s [ options ] { --users || --groups } [ -- ] [ file … ]')

# Standard options.
p.add_argument("-d", "--debug", action="store_true", dest="debug", help="enable debugging messages")
p.add_argument("-q", "--quiet", action="store_true", dest="quiet", help="suppress all messages except errors")
p.add_argument("-v", "--verbose", action="store_true", dest="verbose", help="enable verbose messages")
p.add_argument("--version", action='version', version='%s %s' % (PROG, VERSION))

# Additional options.
p.add_argument("-a", "--all-groups", action="store_true", dest="map_all_groups", help="map all group types instead of only non-system security groups")
p.add_argument("-p", "--preserve-case", action="store_true", dest="preserve_case", help="preserve case in user/group names")

# The --users and --groups options are mutually exclusive.
group = p.add_mutually_exclusive_group()
group.add_argument("-u", "--users", action="store_true", dest="users", help="emit passwd(5) entries")
group.add_argument("-g", "--groups", action="store_true", dest="groups", help="emit group(5) entries")

# Note LDIF files to read, if any.
p.add_argument('files', nargs='*', help='read LDIF records from file(s) instead of stdin')

# Parse options.
args = p.parse_args()

# Initialize logging.
logging.basicConfig(format = '%(name)s: %(levelname)s: %(message)s')
log = logging.getLogger(PROG)
if args.verbose:
    log.setLevel(logging.INFO)
if args.debug:
    log.setLevel(logging.DEBUG)
if args.quiet:
    log.setLevel(logging.ERROR)

# One (and only one) of (--users, --groups) must be specified.
if not (args.users or args.groups):
    log.error('one of --users or --groups is required')
    raise SystemExit(1)

# Now, from what source do we read LDIF records?

if len(args.files) == 0:

    # No LDIF files were supplied on the command line, so read from stdin.

    log.info('parsing LDIF records from stdin')
    parser = MyLDIF(sys.stdin)
    parser.parse()

else:

    # LDIF files were specified, so parse LDIF objects from each file in turn.

    for ldif_file in args.files:
        log.info('parsing LDIF objects from file %s' % ldif_file)
        try:
            with open(ldif_file, 'rb') as input_file:
                parser = MyLDIF(input_file)
                parser.parse()
            log.info('done parsing LDIF objects from file %s (updated object count: %d)' % (ldif_file, len(objects)))
        except IOError as e:
            log.error('unable to open/process %s: %s', ldif_file, e)
            raise SystemExit(1)

# At this point, all LDIF files are parsed.
#
# Regardless of whether we are emitting passwd(5) or group(5) entries, we need
# to calculate the base id value that sssd is using for the domain.
#
# Because the 'Domain Users' group is a well-known group with a fixed RID of
# 513, we will perform a single getgrnam() call against this group.  If that
# call succeeds, then we can calculate the base, and from that, all of the
# other information we need.

try:
    grent = grp.getgrnam('Domain Users')
except KeyError as e:
    log.error('failed to call getgrnam() for group Domain Users: %s', e)
    raise SystemExit(1)

# And now we have the sssd base for this domain.
base = grent.gr_gid - 513

# If we are synthesizing passwd(5) entries, we need to come up with a
# reasonable pw_gid value.
#
# Roughly speaking, what sssd does is the following:
#
#   * If the object is a domain controller, use the gr_gid value of the
#     'Domain Controllers' group as the pw_gid value.
#
#   * If the object is a computer (but not a domain controller), use the
#     gr_gid value of the 'Domain Computers' group as the pw_gid value.
#
#   * Otherwise, use the gr_gid value of the 'Domain Users' group as the
#     pw_gid value.
#
# We will mimic this behavior.  Because all of these groups have well-known
# RID values, we can calculate their gr_gid values from the base.
#
# We don't use these variables if we're emitting groups, but it's easier to
# define them here unconditionally.

gid_domain_users = base + 513
gid_domain_computers = base + 515
gid_domain_controllers = base + 516

# Both the users and groups case use the issuer.
issuer = ''

# For Python 3.6 and later, enumerating dictionaries is guaranteed to enumerate
# them in insertion order:
#
# https://stackoverflow.com/questions/1867861/how-to-keep-keys-values-in-same-order-as-declared
#
# However, this is not guaranteed for earlier versions of Python.  And there is
# no guarantee that the LDIF records we are reading are ordered in any
# consistent way.  It shouldn't be the case that the entries we output are
# ordered differently depending on the order of the LDIF objects we read; we
# should be consistent.
#
# To do this, we will store entries we synthesize in a dictionary where the key
# is the uid (or gid), and the value is the synthesized entry.  After we've
# synthesized all entries, then we will sort the keys in the dictionary and
# enumerate the entries in that order.
#
# This is the dictionary we use to store the entries.

entries = {}

for object in objects:

    # If we're looking for users, skip objects that aren't users; if we're
    # looking for groups, skip objects that aren't groups.

    if args.users:
        if not objects[object]['is_user']:
            continue
    else:
        if not objects[object]['is_group']:
            continue

    # Parse the objectSid.
    sid = objectSID(objects[object]['objectSid'])

    # An object with an objectSid issuer of '32' is a built-in object.  sssd
    # does not enumerate them, so we won't, either.

    if sid.issuer == '32':
        log.debug('skipping built-in object %s with objectSid issuer %s', object, sid.issuer)
        continue

    # We want to guard against the possibility that the LDIF file we were given
    # contains entries from multiple domains.  To do this, we "lock" to the
    # issuer of the objectSid of the first (non-builtin) object we see.

    if issuer:
        if issuer != sid.issuer:
            log.warning('skipping object %s: objectSid issuer %s differs from first seen issuer %s', object, sid.issuer, issuer)
            continue
    else:
        issuer = sid.issuer

    if args.users:

        # We're emitting a user.  What pw_gid value should we use for this
        # user?

        pw_gid = 0
        if objects[object]['is_dc']:
            pw_gid = gid_domain_controllers
        elif objects[object]['is_computer']:
            pw_gid = gid_domain_computers
        else:
            pw_gid = gid_domain_users

        # Synthesize and store the passwd(5) entry.

        pw_uid = base + sid.rid
        if pw_uid in entries:
            log.warning('skipping object %s: id %u duplicates existing entry %s', object, pw_uid, entries[pw_uid])
        elif args.preserve_case:
            entries[pw_uid] = "%s:*:%s:%s:%s:/home/%s:/bin/bash" % (objects[object]['sAMAccountName'], pw_uid, pw_gid, objects[object]['cn'], objects[object]['sAMAccountName'])
        else:
            entries[pw_uid] = "%s:*:%s:%s:%s:/home/%s:/bin/bash" % (objects[object]['sAMAccountName'].lower(), pw_uid, pw_gid, objects[object]['cn'], objects[object]['sAMAccountName'].lower())

    else:

        # Per Microsoft, this is how to decode the groupType:
        #
        #          1 (0x00000001) - a group that is created by the system
        #          2 (0x00000002) - a group with global scope
        #          4 (0x00000004) - a group with domain local scope
        #          8 (0x00000008) - a group with universal scope
        #         16 (0x00000010) - an APP_BASIC group for Windows Server Authorization Manager
        #         32 (0x00000020) - an APP_QUERY group for Windows Server Authorization Manager
        # 2147483648 (0x80000000) - a security group
        #
        # sssd only maps security groups that aren't created by the system.
        # And while we have no groups with the 0x10 or 0x20 attributes, I will
        # assume that sssd won't map them, either.
        #
        # So that leave us with the following tests to determine if we will
        # emit the group:
        #
        #   groupType & 0x80000000 == 0x80000000
        #   groupType & 0x31 == 0
        #
        # Complicating this is the fact that the groupType value as expressed
        # in LDIF is a signed 32-bit integer, so any security group will always
        # be a large negative number.
        #
        # But if --all-groups was specified, then we ignore all of this and
        # emit every group anyway.

        if args.map_all_groups:
            log.debug('skipping groupType checks for %s because --all-groups was specified', object)
        else:
            if objects[object]['groupType'] >= 0:
                log.debug('skipping non-security group %s because --all-groups was not specified', object)
                continue
            else:
                # Convert from 32-bit signed to 32-bit unsigned.
                grouptype = objects[object]['groupType'] + 4294967296
                if grouptype & 0x00000001:
                    log.debug('skipping system-created-security group %s because --all-groups was not specified', object)
                    continue
                elif grouptype & 0x00000010:
                    log.debug('skipping APP_BASIC security group %s because --all-groups was not specified', object)
                    continue
                elif grouptype & 0x00000020:
                    log.debug('skipping APP_QUERY security group %s because --all-groups was not specified', object)
                    continue

        # If we're here, either --all-groups was specified, or this group is a
        # non-system security group.  Either way, we're going to emit it.  But
        # before we do that, we need to expand the group membership.
        #
        # Note that if the group has other groups as members (nested group
        # expansion), we do *not* apply the groupType restrictions above to
        # those group expansions.  This is non-intuitive, but it matches
        # Microsoft's behavior: it is legal to have a non-security group as a
        # member of a security group.  It also matches sssd's behavior.

        group_members = {}
        seen_dns = {}
        if 'member' in objects[object]:
            expand_members(group_members, object, objects, objects[object]['member'], seen_dns)

        # Now that we've expanded the group membership, synthesize and store
        # the group(5) entry.
        #
        # While we would like to match the member ordering that sssd uses, when
        # sssd expands group members, it doesn't sort the expanded members
        # alphabetically.  Nor does sssd enumerate the group members in the
        # same order as Active Directory.  It's not ordering them by RID,
        # either.  So attempting to match sssd's ordering is deceptively
        # challenging.
        #
        # As a compromise, we will emit the group membership alphabetically.
        # While this won't produce the same ordering as sssd, it is the same
        # membership set, and it will produce the same output on consecutive
        # invocations.

        gr_gid = base + sid.rid
        if gr_gid in entries:
            log.warning('skipping object %s: id %u duplicates existing entry %s', object, gr_gid, entries[gr_gid])
        elif args.preserve_case:
            entries[gr_gid] = "%s:*:%s:%s" % (objects[object]['sAMAccountName'], gr_gid, ','.join(sorted(group_members.keys())))
        else:
            entries[gr_gid] = "%s:*:%s:%s" % (objects[object]['sAMAccountName'].lower(), gr_gid, ','.join(sorted(group_members.keys())).lower())

# Finally, print the entries we accumulated, sorted by the uid (or gid).

for key in sorted(entries.keys()):
    print("%s" % entries[key])

# We're done.
raise SystemExit(0)

#
# Local Variables:
# mode:Python
# fill-column:79
# End:
#
